/**
 * Generates G-code from a list of tool operations.
 * @param {Array<Array<{x: number, y: number, z: number}>>} toolpaths - Array of tool operations, each is an array of points.
 * @param {Object} [options] - Optional G-code settings.
 * @returns {string} G-code as a string.
 */
function generate_gcode(toolpaths, options = {}) {
  // toolpaths: array of arrays of points
  // Assumes all coordinates are in mm, Z is up, safe height is 5mm above start Z
  // For flatten operations, we assume Z=0 is the top of the stock (CNC zeroed at top surface)
  // This is the most typical workflow for flattening. Eventually, this may be configurable.
  const lines = [];
  lines.push('; Generated by nerd-cnc');
  lines.push('; Assumption: Z=0 is the top of the stock for flatten operations');
  lines.push('G21 ; Set units to mm');
  lines.push('G90 ; Absolute positioning');

  const origin_z = options.origin_z || 0;
  const feedrate = options.feedrate || 1000; // mm/min
  const spindle_speed = options.spindle_speed || 13000; // rpm

  lines.push(`G1 F${feedrate} ; Set default feedrate`);
  lines.push(`M3 S${spindle_speed} ; Spindle on`);

  for (const op of toolpaths) {
    if (!op || op.length === 0) continue;
    const start = op[0];
    const safe_z = options.safe_z ? options.safe_z : start.z + 5;
    // Retract to safe height before rapid moveA
    lines.push(`G0 Z${(safe_z - origin_z).toFixed(3)}`);
    // Rapid move to start XY at safe height
    lines.push(`G0 X${start.x.toFixed(3)} Y${start.y.toFixed(3)}`);
    // Plunge to start Z
    lines.push(`G1 Z${(start.z - origin_z).toFixed(3)}`);
    // Cut path for this operation
    for (const pt of op) {
      lines.push(`G1 X${pt.x.toFixed(3)} Y${pt.y.toFixed(3)} Z${(pt.z - origin_z).toFixed(3)}`);
    }
    // Retract to safe height at end of operation
    lines.push(`G0 Z${(safe_z - origin_z).toFixed(3)}`);
  }

  lines.push('M5 ; Spindle stop');
  lines.push('M2 ; End of program');
  return lines.join('\n');
}

module.exports = { generate_gcode };
